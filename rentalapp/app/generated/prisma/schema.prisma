// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema 

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                String   @id @default(cuid())
  checkoutSessionId String?
  status            String?
  paidAt            DateTime @default(now())
  createdAt         DateTime @default(now())
  userId            String
  email             String
  name              String
  phone             String

  @@map("orders")
}

model Agent {
  id          String     @id @default(cuid())
  name        String
  email       String     @unique
  phone       String?
  isSuspended Boolean    @default(false)
  properties  Property[]

  @@map("agents")
}

model Property {
  id           String      @id @default(cuid())
  title        String
  description  String?
  price        Int
  propertyType String
  landSize     Int
  address      String
  city         String
  area         String
  bedrooms     Int
  bathrooms    Int
  electricity  Boolean     @default(false) // NEW
  virtualTours Json? // NEW
  images       Json? //[{url, publicId}, ...]
  isAvailable  Boolean     @default(true)
  postedAt     DateTime    @default(now())
  agentId      String
  agent        Agent       @relation(fields: [agentId], references: [id])
  favourite    Favourite[]
  amenities    Amenity[] // NEW many-to-many

  @@map("properties")
}

model Amenity {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[]

  @@map("amenities")
}

model Favourite {
  id         String   @id @default(cuid())
  userId     String // Clerk user id
  propertyId String
  createdAt  DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model ContactSubmission {
  id            Int      @id @default(autoincrement())
  customerName  String
  customerEmail String
  customerPhone String?
  reasonType    String // "issue", "question", "feedback"
  message       String   @db.Text
  status        String   @default("new") // "new", "in-progress", "resolved"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
